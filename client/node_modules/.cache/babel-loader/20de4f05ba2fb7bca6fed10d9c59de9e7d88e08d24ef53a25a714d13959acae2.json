{"ast":null,"code":"\"use strict\";\n\nvar url = require('url'),\n  auth_hdr = require('./auth_header');\n\n// Note: express http converts all headers\n// to lower case.\nvar AUTH_HEADER = \"authorization\",\n  LEGACY_AUTH_SCHEME = \"JWT\",\n  BEARER_AUTH_SCHEME = 'bearer';\nvar extractors = {};\nextractors.fromHeader = function (header_name) {\n  return function (request) {\n    var token = null;\n    if (request.headers[header_name]) {\n      token = request.headers[header_name];\n    }\n    return token;\n  };\n};\nextractors.fromBodyField = function (field_name) {\n  return function (request) {\n    var token = null;\n    if (request.body && Object.prototype.hasOwnProperty.call(request.body, field_name)) {\n      token = request.body[field_name];\n    }\n    return token;\n  };\n};\nextractors.fromUrlQueryParameter = function (param_name) {\n  return function (request) {\n    var token = null,\n      parsed_url = url.parse(request.url, true);\n    if (parsed_url.query && Object.prototype.hasOwnProperty.call(parsed_url.query, param_name)) {\n      token = parsed_url.query[param_name];\n    }\n    return token;\n  };\n};\nextractors.fromAuthHeaderWithScheme = function (auth_scheme) {\n  var auth_scheme_lower = auth_scheme.toLowerCase();\n  return function (request) {\n    var token = null;\n    if (request.headers[AUTH_HEADER]) {\n      var auth_params = auth_hdr.parse(request.headers[AUTH_HEADER]);\n      if (auth_params && auth_scheme_lower === auth_params.scheme.toLowerCase()) {\n        token = auth_params.value;\n      }\n    }\n    return token;\n  };\n};\nextractors.fromAuthHeaderAsBearerToken = function () {\n  return extractors.fromAuthHeaderWithScheme(BEARER_AUTH_SCHEME);\n};\nextractors.fromExtractors = function (extractors) {\n  if (!Array.isArray(extractors)) {\n    throw new TypeError('extractors.fromExtractors expects an array');\n  }\n  return function (request) {\n    var token = null;\n    var index = 0;\n    while (!token && index < extractors.length) {\n      token = extractors[index].call(this, request);\n      index++;\n    }\n    return token;\n  };\n};\n\n/**\n * This extractor mimics the behavior of the v1.*.* extraction logic.\n *\n * This extractor exists only to provide an easy transition from the v1.*.* API to the v2.0.0\n * API.\n *\n * This extractor first checks the auth header, if it doesn't find a token there then it checks the \n * specified body field and finally the url query parameters.\n * \n * @param options\n *          authScheme: Expected scheme when JWT can be found in HTTP Authorize header. Default is JWT. \n *          tokenBodyField: Field in request body containing token. Default is auth_token.\n *          tokenQueryParameterName: Query parameter name containing the token. Default is auth_token.\n */\nextractors.versionOneCompatibility = function (options) {\n  var authScheme = options.authScheme || LEGACY_AUTH_SCHEME,\n    bodyField = options.tokenBodyField || 'auth_token',\n    queryParam = options.tokenQueryParameterName || 'auth_token';\n  return function (request) {\n    var authHeaderExtractor = extractors.fromAuthHeaderWithScheme(authScheme);\n    var token = authHeaderExtractor(request);\n    if (!token) {\n      var bodyExtractor = extractors.fromBodyField(bodyField);\n      token = bodyExtractor(request);\n    }\n    if (!token) {\n      var queryExtractor = extractors.fromUrlQueryParameter(queryParam);\n      token = queryExtractor(request);\n    }\n    return token;\n  };\n};\n\n/**\n * Export the Jwt extraction functions\n */\nmodule.exports = extractors;","map":{"version":3,"names":["url","require","auth_hdr","AUTH_HEADER","LEGACY_AUTH_SCHEME","BEARER_AUTH_SCHEME","extractors","fromHeader","header_name","request","token","headers","fromBodyField","field_name","body","Object","prototype","hasOwnProperty","call","fromUrlQueryParameter","param_name","parsed_url","parse","query","fromAuthHeaderWithScheme","auth_scheme","auth_scheme_lower","toLowerCase","auth_params","scheme","value","fromAuthHeaderAsBearerToken","fromExtractors","Array","isArray","TypeError","index","length","versionOneCompatibility","options","authScheme","bodyField","tokenBodyField","queryParam","tokenQueryParameterName","authHeaderExtractor","bodyExtractor","queryExtractor","module","exports"],"sources":["/Users/pamelaklapp/node_modules/passport-jwt/lib/extract_jwt.js"],"sourcesContent":["\"use strict\";\n\nvar url = require('url'),\n    auth_hdr = require('./auth_header');\n\n// Note: express http converts all headers\n// to lower case.\nvar AUTH_HEADER = \"authorization\",\n    LEGACY_AUTH_SCHEME = \"JWT\", \n    BEARER_AUTH_SCHEME = 'bearer';\n\n\nvar extractors = {};\n\n\nextractors.fromHeader = function (header_name) {\n    return function (request) {\n        var token = null;\n        if (request.headers[header_name]) {\n            token = request.headers[header_name];\n        }\n        return token;\n    };\n};\n\n\n\nextractors.fromBodyField = function (field_name) {\n    return function (request) {\n        var token = null;\n        if (request.body && Object.prototype.hasOwnProperty.call(request.body, field_name)) {\n            token = request.body[field_name];\n        }\n        return token;\n    };\n};\n\n\n\nextractors.fromUrlQueryParameter = function (param_name) {\n    return function (request) {\n        var token = null,\n            parsed_url = url.parse(request.url, true);\n        if (parsed_url.query && Object.prototype.hasOwnProperty.call(parsed_url.query, param_name)) {\n            token = parsed_url.query[param_name];\n        }\n        return token;\n    };\n};\n\n\n\nextractors.fromAuthHeaderWithScheme = function (auth_scheme) {\n    var auth_scheme_lower = auth_scheme.toLowerCase();\n    return function (request) {\n\n        var token = null;\n        if (request.headers[AUTH_HEADER]) {\n            var auth_params = auth_hdr.parse(request.headers[AUTH_HEADER]);\n            if (auth_params && auth_scheme_lower === auth_params.scheme.toLowerCase()) {\n                token = auth_params.value;\n            }\n        }\n        return token;\n    };\n};\n\n\n\nextractors.fromAuthHeaderAsBearerToken = function () {\n    return extractors.fromAuthHeaderWithScheme(BEARER_AUTH_SCHEME);\n};\n\n\nextractors.fromExtractors = function(extractors) {\n    if (!Array.isArray(extractors)) {\n        throw new TypeError('extractors.fromExtractors expects an array')\n    }\n    \n    return function (request) {\n        var token = null;\n        var index = 0;\n        while(!token && index < extractors.length) {\n            token = extractors[index].call(this, request);\n            index ++;\n        }\n        return token;\n    }\n};\n\n\n/**\n * This extractor mimics the behavior of the v1.*.* extraction logic.\n *\n * This extractor exists only to provide an easy transition from the v1.*.* API to the v2.0.0\n * API.\n *\n * This extractor first checks the auth header, if it doesn't find a token there then it checks the \n * specified body field and finally the url query parameters.\n * \n * @param options\n *          authScheme: Expected scheme when JWT can be found in HTTP Authorize header. Default is JWT. \n *          tokenBodyField: Field in request body containing token. Default is auth_token.\n *          tokenQueryParameterName: Query parameter name containing the token. Default is auth_token.\n */\nextractors.versionOneCompatibility = function (options) {\n    var authScheme = options.authScheme || LEGACY_AUTH_SCHEME,\n        bodyField = options.tokenBodyField || 'auth_token',\n        queryParam = options.tokenQueryParameterName || 'auth_token';\n\n    return function (request) {\n        var authHeaderExtractor = extractors.fromAuthHeaderWithScheme(authScheme);\n        var token =  authHeaderExtractor(request);\n        \n        if (!token) {\n            var bodyExtractor = extractors.fromBodyField(bodyField);\n            token = bodyExtractor(request);\n        }\n\n        if (!token) {\n            var queryExtractor = extractors.fromUrlQueryParameter(queryParam);\n            token = queryExtractor(request);\n        }\n\n        return token;\n    };\n}\n\n\n\n/**\n * Export the Jwt extraction functions\n */\nmodule.exports = extractors;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;EACpBC,QAAQ,GAAGD,OAAO,CAAC,eAAe,CAAC;;AAEvC;AACA;AACA,IAAIE,WAAW,GAAG,eAAe;EAC7BC,kBAAkB,GAAG,KAAK;EAC1BC,kBAAkB,GAAG,QAAQ;AAGjC,IAAIC,UAAU,GAAG,CAAC,CAAC;AAGnBA,UAAU,CAACC,UAAU,GAAG,UAAUC,WAAW,EAAE;EAC3C,OAAO,UAAUC,OAAO,EAAE;IACtB,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAID,OAAO,CAACE,OAAO,CAACH,WAAW,CAAC,EAAE;MAC9BE,KAAK,GAAGD,OAAO,CAACE,OAAO,CAACH,WAAW,CAAC;IACxC;IACA,OAAOE,KAAK;EAChB,CAAC;AACL,CAAC;AAIDJ,UAAU,CAACM,aAAa,GAAG,UAAUC,UAAU,EAAE;EAC7C,OAAO,UAAUJ,OAAO,EAAE;IACtB,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAID,OAAO,CAACK,IAAI,IAAIC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACT,OAAO,CAACK,IAAI,EAAED,UAAU,CAAC,EAAE;MAChFH,KAAK,GAAGD,OAAO,CAACK,IAAI,CAACD,UAAU,CAAC;IACpC;IACA,OAAOH,KAAK;EAChB,CAAC;AACL,CAAC;AAIDJ,UAAU,CAACa,qBAAqB,GAAG,UAAUC,UAAU,EAAE;EACrD,OAAO,UAAUX,OAAO,EAAE;IACtB,IAAIC,KAAK,GAAG,IAAI;MACZW,UAAU,GAAGrB,GAAG,CAACsB,KAAK,CAACb,OAAO,CAACT,GAAG,EAAE,IAAI,CAAC;IAC7C,IAAIqB,UAAU,CAACE,KAAK,IAAIR,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACG,UAAU,CAACE,KAAK,EAAEH,UAAU,CAAC,EAAE;MACxFV,KAAK,GAAGW,UAAU,CAACE,KAAK,CAACH,UAAU,CAAC;IACxC;IACA,OAAOV,KAAK;EAChB,CAAC;AACL,CAAC;AAIDJ,UAAU,CAACkB,wBAAwB,GAAG,UAAUC,WAAW,EAAE;EACzD,IAAIC,iBAAiB,GAAGD,WAAW,CAACE,WAAW,EAAE;EACjD,OAAO,UAAUlB,OAAO,EAAE;IAEtB,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAID,OAAO,CAACE,OAAO,CAACR,WAAW,CAAC,EAAE;MAC9B,IAAIyB,WAAW,GAAG1B,QAAQ,CAACoB,KAAK,CAACb,OAAO,CAACE,OAAO,CAACR,WAAW,CAAC,CAAC;MAC9D,IAAIyB,WAAW,IAAIF,iBAAiB,KAAKE,WAAW,CAACC,MAAM,CAACF,WAAW,EAAE,EAAE;QACvEjB,KAAK,GAAGkB,WAAW,CAACE,KAAK;MAC7B;IACJ;IACA,OAAOpB,KAAK;EAChB,CAAC;AACL,CAAC;AAIDJ,UAAU,CAACyB,2BAA2B,GAAG,YAAY;EACjD,OAAOzB,UAAU,CAACkB,wBAAwB,CAACnB,kBAAkB,CAAC;AAClE,CAAC;AAGDC,UAAU,CAAC0B,cAAc,GAAG,UAAS1B,UAAU,EAAE;EAC7C,IAAI,CAAC2B,KAAK,CAACC,OAAO,CAAC5B,UAAU,CAAC,EAAE;IAC5B,MAAM,IAAI6B,SAAS,CAAC,4CAA4C,CAAC;EACrE;EAEA,OAAO,UAAU1B,OAAO,EAAE;IACtB,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI0B,KAAK,GAAG,CAAC;IACb,OAAM,CAAC1B,KAAK,IAAI0B,KAAK,GAAG9B,UAAU,CAAC+B,MAAM,EAAE;MACvC3B,KAAK,GAAGJ,UAAU,CAAC8B,KAAK,CAAC,CAAClB,IAAI,CAAC,IAAI,EAAET,OAAO,CAAC;MAC7C2B,KAAK,EAAG;IACZ;IACA,OAAO1B,KAAK;EAChB,CAAC;AACL,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,UAAU,CAACgC,uBAAuB,GAAG,UAAUC,OAAO,EAAE;EACpD,IAAIC,UAAU,GAAGD,OAAO,CAACC,UAAU,IAAIpC,kBAAkB;IACrDqC,SAAS,GAAGF,OAAO,CAACG,cAAc,IAAI,YAAY;IAClDC,UAAU,GAAGJ,OAAO,CAACK,uBAAuB,IAAI,YAAY;EAEhE,OAAO,UAAUnC,OAAO,EAAE;IACtB,IAAIoC,mBAAmB,GAAGvC,UAAU,CAACkB,wBAAwB,CAACgB,UAAU,CAAC;IACzE,IAAI9B,KAAK,GAAImC,mBAAmB,CAACpC,OAAO,CAAC;IAEzC,IAAI,CAACC,KAAK,EAAE;MACR,IAAIoC,aAAa,GAAGxC,UAAU,CAACM,aAAa,CAAC6B,SAAS,CAAC;MACvD/B,KAAK,GAAGoC,aAAa,CAACrC,OAAO,CAAC;IAClC;IAEA,IAAI,CAACC,KAAK,EAAE;MACR,IAAIqC,cAAc,GAAGzC,UAAU,CAACa,qBAAqB,CAACwB,UAAU,CAAC;MACjEjC,KAAK,GAAGqC,cAAc,CAACtC,OAAO,CAAC;IACnC;IAEA,OAAOC,KAAK;EAChB,CAAC;AACL,CAAC;;AAID;AACA;AACA;AACAsC,MAAM,CAACC,OAAO,GAAG3C,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}